clearvars;
direct = 'C:/Users/Alpha/Documents/andy/chiral_models_comsol/2step_gammadion_data/edataf/';
counter =0;
cd(direct);
mkdir(strcat(direct,'../newdataeLinear/'));
files = dir('**');
files(1:2) = [];
totalFiles = numel(files);
j=1;
rmatrix = ones(19*19*92,9)*-1;
ematrix = ones(19*19*92,36,6)*-1;
loopCounter=0;
ecounter=1;
rcounter=1;
while j<=totalFiles
    fname = files(j).name;
    filename=strcat(direct,fname);
    ecounterold = ecounter;
    if length(fname)>16
        mat = importComsFile(filename);
        [X,Y] = meshgrid(1:length(mat(:,1)),1:length(mat(1,:)));
        [X2,Y2] = meshgrid(linspace(1,length(mat(:,1)),42),linspace(1,length(mat(1,:)),42));
        mat = interp2(X,Y,mat,X2,Y2);
        for m1 = 1:2:37
            for m2 = 1:2:37
                uc = mat(m1:m1+5,m2:m2+5);
                ucrs = reshape(uc,[1,numel(uc)]);
                ematrix(ecounter,:,loopCounter) = ucrs;
                ecounter = ecounter + 1;
            end
        end
    else
        mat = importdata(filename);
        for m1 = 1:1:19
            for m2 = 1:1:19
                uc = mat(m1:m1+2,m2:m2+2);
                ucrs = reshape(uc,[1,numel(uc)]);
                rmatrix(rcounter,:) = ucrs;
                rcounter = rcounter + 1;
            end
        end
    end
    loopCounter = loopCounter + 1;
    if loopCounter == 7
        loopCounter=0;
        j = j+6;
    elseif length(fname)>16
        ecounter = ecounterold;
    end
    j = j+1;
end

writetable(table(ematrix(:,:,1)), strcat(direct,'../newdataeLinear/ematrix_CPL-1.txt'),'WriteVariableNames',false);
writetable(table(ematrix(:,:,2)), strcat(direct,'../newdataeLinear/ematrix_CPL-2.txt'),'WriteVariableNames',false);
writetable(table(ematrix(:,:,3)), strcat(direct,'../newdataeLinear/ematrix_CPL-3.txt'),'WriteVariableNames',false);
writetable(table(ematrix(:,:,4)), strcat(direct,'../newdataeLinear/ematrix_CPL-4.txt'),'WriteVariableNames',false);
writetable(table(ematrix(:,:,5)), strcat(direct,'../newdataeLinear/ematrix_CPL-5.txt'),'WriteVariableNames',false);
writetable(table(ematrix(:,:,6)), strcat(direct,'../newdataeLinear/ematrix_CPL-6.txt'),'WriteVariableNames',false);
writetable(table(rmatrix), strcat(direct,'../newdataeLinear/rmatrix_gammadions.txt'),'WriteVariableNames',false);


function structure0CCPL1 = importComsFile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   STRUCTURE0CCPL1 = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   STRUCTURE0CCPL1 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   structure0CCPL1 = importfile('structure0_CCPL-1.txt', 6, 55);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2021/07/27 17:45:14

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 6;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
%   column43: double (%f)
%	column44: double (%f)
%   column45: double (%f)
%	column46: double (%f)
%   column47: double (%f)
%	column48: double (%f)
%   column49: double (%f)
%	column50: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
structure0CCPL1 = [dataArray{1:end-1}];
end